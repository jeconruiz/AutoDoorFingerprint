#include <Arduino.h>
#include "LowPower.h"
#include "Adafruit_Fingerprint.h"
#include "SoftwareSerial.h"

// put function declarations here:
void wakeUp();
void verify_User();
void open_Door();
int getFingerprintIDez();
void okSound();
void wrongSound();

const byte interruptPin = 2;
int led_Rojo=12, led_Verde=8, beep=5, base=7;  //Salidas de los led y buzzer
int fingerID;  //Almacenamiento de último ID de huella
SoftwareSerial mySerial (4, 3);  //Comunicacion serie del sensor, Tx-Rx(0 y 1) quedan libres
Adafruit_Fingerprint finger = Adafruit_Fingerprint(&mySerial);

void setup(){
  // put your setup code here, to run once:
  Serial.begin(57600);
  Serial.println("Entra en setup OK");    //BORRAR: depuración
  pinMode(led_Rojo, OUTPUT); pinMode(led_Verde, OUTPUT);
  pinMode(interruptPin, INPUT);
  finger.begin(57600);    //Inicializa comunicación con el sensor

    //Si encuentra sensor enciende led verde, si no lo bloquea con led rojo y sonido
  if (finger.verifyPassword()) {
    digitalWrite(led_Verde, HIGH);okSound();
    digitalWrite(led_Verde, LOW);
  }
  else {
    while(1){
      digitalWrite(led_Rojo, HIGH); delay(500);
      digitalWrite(led_Rojo, LOW); delay(500);
    }
  }
  Serial.println("dentro de loop");      //BORRAR: depuración
  Serial.println("int pte. configurar");
  attachInterrupt(0, wakeUp, LOW);    //Accion de interrupción 0
  Serial.println("int configurada");  //BORRAR: depuración
}


void loop(){
  // put your main code here, to run repeatedly:
  Serial.println("dentro de loop");      //BORRAR: depuración
  LowPower.powerDown(SLEEP_FOREVER, ADC_OFF, BOD_OFF);    //Zzzzzzz.....
}


// put function definitions here:

// Función al despertar=========================================================================
void wakeUp(){
    Serial.println("Awake!");      //BORRAR: depuración
  fingerID=getFingerprintIDez();
  if(fingerID){           //Huella encontrada
    digitalWrite(led_Verde, HIGH);
    okSound();
    digitalWrite(led_Verde, LOW);
    verify_User();
  }
  else{                  //Lectura errónea o huella no coincide
    digitalWrite(led_Rojo, HIGH);
    wrongSound();
    digitalWrite(led_Rojo, LOW);
  }
}

// Segunda huella===============================================================================
void verify_User(){
  Serial.println("Verifying   ");      //BORRAR: depuración
  int verify_err=0;
  while(verify_err<3){
    if(getFingerprintIDez() != -1){
      open_Door();
    }
    else{
      digitalWrite(led_Rojo, HIGH);
      wrongSound();
      digitalWrite(led_Rojo, LOW);
      verify_err ++;
    }
  }
}

//Apertura de puerta============================================================================
void open_Door(){
  digitalWrite(led_Verde, HIGH);
  okSound();
  digitalWrite(base, HIGH);
  delay(3000);
  digitalWrite(led_Verde, HIGH);
  digitalWrite(base, HIGH);
}

//Lectura de huella=============================================================================
int getFingerprintIDez() {          //Devuelve -1 si no encuentra huella. Si no, devuelve el ID
  Serial.println("Getting finger");
  uint8_t p = finger.getImage();    //Recoge imagen de la huella
  if (p != FINGERPRINT_OK)  return -1;

  p = finger.image2Tz();            //Genera el archivo de imagen de la huella
  if (p != FINGERPRINT_OK)  return -1;

  p = finger.fingerFastSearch();    //Búsqueda rapida en la memoria
  if (p != FINGERPRINT_OK)  return -1;
  
  // Si encuentra la huella en la memoria devuelve el ID
  return finger.fingerID;
}

//Buzz sounds===================================================================================
void okSound(){
  tone(beep, 2093);
  delay(50);
  tone(beep, 2217.46);
  delay(50);
  tone(beep, 2637.02);
  delay(50);
  tone(beep, 3520);
  delay(150);
  noTone(8);
}
  
void wrongSound(){
  tone(beep, 2093);
  delay(100);
  noTone(beep);
  delay(100);
  tone(beep, 2093);
  delay(100);
  noTone(beep);
}
